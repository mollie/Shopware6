name: CI Pipeline

on:
  push:
    branches:
      - master
      - beta/subscription
  workflow_dispatch:
    branches:
      - master
      - beta/subscription

jobs:


  jest:
    name: Jest Tests
    runs-on: ubuntu-latest
    steps:
      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: make dev -B

      - name: Run Jest
        run: make jest -B

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    needs: jest
    steps:
      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: make dev -B

      - name: Run ESLint
        run: make eslint -B

  stylelint:
    name: Stylelint
    runs-on: ubuntu-latest
    needs: eslint
    steps:
      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: make dev -B

      - name: Run Stylelint
        run: make stylelint -B

  # ------------------------------------------------------------------------------------------------------------------------

  php_checks:
    name: PHP Syntax Checks
    runs-on: ubuntu-latest
    steps:
      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: PHP Syntax Checks
        run: make phpcheck -B

  php_min:
    name: PHP 7.2 Compatibility
    needs: php_checks
    runs-on: ubuntu-latest
    steps:
      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: make dev -B

      - name: PHP Compatibility Checks
        run: make phpmin -B

  # ------------------------------------------------------------------------------------------------------------------------

  phpunit:
    name: Unit Tests | PHP ${{ matrix.php }}
    needs: php_min
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [ '7.4' ]
    steps:
      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}

      - name: Install Dependencies
        run: make dev -B

      - name: Run PHPUnit
        run: make phpunit -B

  infection:
    name: Mutation Tests | PHP ${{ matrix.php }}
    needs: phpunit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [ '7.4' ]
    steps:
      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}

      - name: Install Dependencies
        run: make dev -B

      - name: Run Infection
        run: make infection -B

  phpstan:
    name: Static Analyzers
    needs: infection
    runs-on: ubuntu-latest
    steps:

      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: make dev -B

      - name: Run PHPStan
        run: make stan -B

  phpcsfixer:
    name: PHP CS Fixer
    needs: phpstan
    runs-on: ubuntu-latest
    steps:

      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install Dependencies
        run: make dev -B

      - name: Run PHP CS Fixer
        run: make csfix -B

  # ------------------------------------------------------------------------------------------------------------------------

  integration:
    name: Integration Tests | Shopware ${{ matrix.shopware }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shopware: [ '6.4.0.0', '6.3.0', '6.2.0', '6.1.0' ]
    steps:

      - name: Clone Code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4

      - name: Install PROD Dependencies
        run: make install -B

      - name: Start Docker
        run: |
          docker run --rm --name shop -d dockware/play:${{ matrix.shopware }}
          sleep 30
          docker logs shop

      - name: Upload into Docker
        run: docker cp $(pwd)/. shop:/var/www/html/custom/plugins/MolliePayments

      - name: Install Plugin
        run: |
          docker exec shop bash -c "php bin/console plugin:refresh"
          docker exec shop bash -c "php bin/console plugin:install MolliePayments --activate"

  # ------------------------------------------------------------------------------------------------------------------------

  e2e:
    name: E2E Tests | Shopware ${{ matrix.shopware }}, PHP ${{ matrix.php }}
    needs: integration
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - shopware: '6.4.7.0'
            php: '8.1'
          - shopware: '6.4.6.1'
            php: '8.0'
          - shopware: '6.4.5.1'
            php: '7.4'
          - shopware: '6.4.4.1'
            php: '7.4'
          - shopware: '6.4.3.1'
            php: '7.4'
          - shopware: '6.4.2.1'
            php: '7.4'
          - shopware: '6.4.1.2'
            php: '7.4'
          - shopware: '6.4.0.0'
            php: '7.4'
          - shopware: '6.3.5.4'
            php: '7.2'
          - shopware: '6.3.5.2'
            php: '7.2'
    steps:

      - name: Clone Code
        uses: actions/checkout@v2

      - name: Download Docker
        run: |
          docker pull dockware/dev:${{ matrix.shopware }}

      - name: Start Docker
        run: |
          docker run --rm -p 443:443 --name shop --env PHP_VERSION=${{ matrix.php }} -d dockware/dev:${{ matrix.shopware }}
          sleep 30
          docker logs shop
          # now change the domain of our shop, mollie doesn't work with localhost
          sudo echo "127.0.0.1 local.mollie.shop" | sudo tee -a /etc/hosts
          docker exec shop bash -c "mysql -u root -proot shopware -e \"UPDATE sales_channel_domain SET url='https://local.mollie.shop' WHERE url NOT LIKE 'default.%';\""

      - name: Upload into Docker
        run: |
          docker cp $(pwd)/. shop:/var/www/html/custom/plugins/MolliePayments
          docker exec shop bash -c 'sudo chown www-data:www-data /var/www/html/custom/plugins -R'

      - name: Install and Build Artifacts
        run: |
          docker exec shop bash -c 'cd /var/www/html/custom/plugins/MolliePayments && make install -B'
          docker exec shop bash -c 'cd /var/www/html/custom/plugins/MolliePayments && make build -B'

      - name: Install/Configure Plugin
        run: |
          docker exec shop bash -c 'php bin/console plugin:refresh'
          docker exec shop bash -c 'php bin/console plugin:install MolliePayments --activate'
          docker exec shop bash -c 'php bin/console system:config:set MolliePayments.config.liveApiKey ${{ secrets.MOLLIE_APIKEY_TEST }}'
          docker exec shop bash -c 'php bin/console system:config:set MolliePayments.config.testApiKey ${{ secrets.MOLLIE_APIKEY_TEST }}'
          docker exec shop bash -c 'php bin/console system:config:set MolliePayments.config.testMode true'
          docker exec shop bash -c 'php bin/console cache:clear'

      - name: Install Cypress
        run: cd tests/Cypress && make install -B

      - name: Start Cypress
        run: cd tests/Cypress && make run shopware=${{ matrix.shopware }} url=https://local.mollie.shop

      - name: Download Logs
        if: ${{ always() }}
        run: |
          mkdir -p $(pwd)/tests/Cypress/cypress/logs/shopware
          mkdir -p $(pwd)/tests/Cypress/cypress/logs/apache
          docker cp shop:/var/www/html/var/log/. $(pwd)/tests/Cypress/cypress/logs/shopware
          docker cp shop:/var/log/php/. $(pwd)/tests/Cypress/cypress/logs/apache

      - name: Store Cypress Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress_results_sw_v${{ matrix.shopware }}
          retention-days: 1
          path: |
            tests/Cypress/cypress/logs
            tests/Cypress/cypress/videos
            tests/Cypress/cypress/screenshots
